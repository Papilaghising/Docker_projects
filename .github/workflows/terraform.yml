#.github/workflows/terraform
name: Terraform Deployment

on:
  push:
    branches:
      - docker 
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}
  AWS_REGION: "us-east-1"
  backendS3Bucket: "8586-terraform-state"
  backendS3AccountId: ${{ secrets.ACCOUNT_ID }}
  backendS3StateFile: "docker-2.tfstate"
  backendS3region: "us-east-1"




jobs:
  terraform:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-session-token: ${{ secrets.SESSION_TOKEN }}
          aws-region: us-east-1


      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ env.backendS3Bucket }}" -backend-config="key=${{ env.backendS3AccountId }}/${{ env.backendS3StateFile }}" -backend-config="region=${{ env.backendS3Region }}"
          


      - name: Apply Terraform Changes
        run: |
          cd terraform
          terraform plan -var-file=vars.tfvars 
        


      - name: Apply Terraform Changes
        run: |
          cd terraform
          terraform apply -var-file=vars.tfvars -auto-approve


      - name: Destroy Terraform Resources
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd terraform
          terraform destroy -var-file=vars.tfvars -auto-approve


  # configure:
  #   needs: terraform
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4


  #     - name: install ansible and dependencies
  #       run: |
  #         pip3 install botocore
  #         pip3 install boto3
  #         pip3 install ansible


  #     - name: run ansible playbook
  #       run: |
  #         cd ansible
  #         ansible-playbook -i aws_ec2.yml playbook.yml   

   


